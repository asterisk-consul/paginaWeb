---
// src/components/HeroWithBackground.astro
import foto1 from "../../assets/foto1.webp";
---

<section class="h-screen w-full animated-section">
  <div class="relative h-screen w-full">
    <!-- Imagen de fondo -->
    <img
      src={foto1.src}
      alt="Descripción de la imagen"
      class="absolute inset-0 h-full w-full object-cover object-center"
      width={foto1.width}
      height={foto1.height}
      loading="eager"
    />

    <!-- Degradado circular desde la esquina superior derecha -->
    <div
      class="absolute inset-0 bg-gradient-radial from-transparent via-black/70 to-black/0"
    >
    </div>

    <!-- Contenido posicionado abajo a la izquierda -->
    <div
      class="relative z-10 flex h-full flex-col items-start justify-end text-left text-white px-8 pb-16 md:px-16 md:pb-24"
    >
      <h1
        class="mb-6 text-4xl font-bold md:text-6xl animate-item"
        data-animation="fade-in-up"
        data-delay="100"
      >
        Conta con nosotros
      </h1>
      <p
        class="mb-8 max-w-2xl text-xl md:text-2xl animate-item"
        data-animation="fade-in-up"
        data-delay="300"
      >
        Si tienes alguna duda o consulta, no dudes en contactarnos. Estamos aqui
        para ayudarte.
      </p>
      <a
        href="#contacto"
        class="animate-item rounded-lg border-2 border-[#e63605] bg-transparent px-8 py-3 text-2xl font-semibold transition hover:bg-[#e63605] hover:text-[#faf5ec] focus:outline-none focus:ring-4 focus:ring-[#b0121e] dark:text-[#e63605] dark:hover:bg-[#e63605] dark:hover:text-[#faf5ec] dark:focus:ring-[#b0121e]"
        data-animation="fade-in-up"
        data-delay="300"
      >
        Contactar Ahora
      </a>
    </div>
  </div>
</section>

<style>
  /* Definición del gradiente radial para navegadores que lo soporten */
  .bg-gradient-radial {
    background: radial-gradient(
      circle at top right,
      transparent,
      rgba(0, 0, 0, 0.4) 50%,
      rgba(0, 0, 0, 0.7) 100%
    );
  }

  @keyframes fadeInUp {
    0% {
      opacity: 0;
      transform: translateY(30px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Estilos iniciales para elementos animados */
  .animate-item {
    opacity: 0;
  }

  /* Las clases de animación se añadirán por JavaScript */
  .animate-item.active[data-animation="fade-in-up"] {
    animation: fadeInUp 1s ease-out forwards;
  }
</style>

<script is:inline>
  function setupAnimations() {
    // Seleccionamos todas las secciones animadas
    const animatedSections = document.querySelectorAll(".animated-section");

    if (!animatedSections.length) return;

    // Creamos un nuevo Intersection Observer
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // Si la sección está en el viewport
          if (entry.isIntersecting) {
            const section = entry.target;
            const animatedItems = section.querySelectorAll(".animate-item");

            // Para cada elemento animado dentro de la sección
            animatedItems.forEach((item) => {
              // Removemos la clase active para reiniciar la animación
              item.classList.remove("active");

              // Forzamos un reflow para que el navegador procese el cambio
              void item.offsetWidth;

              // Aplicamos la animación después del delay especificado
              const delay = parseInt(
                item.getAttribute("data-delay") || "0",
                10
              );

              setTimeout(() => {
                item.classList.add("active");
              }, delay);
            });
          }
        });
      },
      {
        threshold: 0.3, // La animación se activa cuando al menos 30% del elemento es visible
        // Solo observar la entrada al viewport, no la salida
        rootMargin: "0px",
      }
    );

    // Observamos todas las secciones animadas
    animatedSections.forEach((section) => {
      observer.observe(section);
    });
  }

  // Ejecutar cuando el DOM esté completamente cargado
  document.addEventListener("DOMContentLoaded", setupAnimations);

  // Reiniciar las animaciones cuando haya navegación con el router de Astro
  document.addEventListener("astro:page-load", setupAnimations);

  // Para páginas de una sola vista (SPA), podemos también escuchar eventos de scroll
  // para detectar cuando los elementos entran en el viewport de nuevo después de un scroll
  let isScrolling;
  window.addEventListener("scroll", () => {
    // Limpiamos el temporizador anterior
    window.clearTimeout(isScrolling);

    // Establecemos un temporizador para ejecutar el código después de que el usuario deje de hacer scroll
    isScrolling = setTimeout(() => {
      // Si el usuario ha dejado de hacer scroll, podemos verificar si hay elementos
      // que deberían ser animados nuevamente
      setupAnimations();
    }, 100);
  });
</script>
